<!DOCTYPE html>
<html lang="en">
<head>
  <meta charset="UTF-8" />
  <meta http-equiv="Content-Security-Policy" content="default-src 'none'; img-src data:; style-src 'unsafe-inline'; script-src 'nonce-{{nonce}}';" />
  <meta name="viewport" content="width=device-width, initial-scale=1.0"/>
  <title>ScubaCoder — Chat</title>
  <style>
    :root {
      /* Core theme colors */
      --fg: var(--vscode-foreground);
      --bg: var(--vscode-editor-background);
      --muted: var(--vscode-descriptionForeground);
      
      /* UI element colors */
      --border: var(--vscode-panel-border);
      --hover-border: var(--vscode-input-foreground);
      --btn: var(--vscode-button-background);
      --btn-fg: var(--vscode-button-foreground);
      --btn-hover: var(--vscode-button-hoverBackground);
      --input-bg: var(--vscode-input-background);
      --input-fg: var(--vscode-input-foreground);
      --input-border: var(--vscode-input-border);
      --badge-bg: var(--vscode-badge-background);
      --badge-fg: var(--vscode-badge-foreground);
      --header-bg: var(--vscode-editor-background);
      --card-bg: var(--vscode-editor-background);
      --code-bg: var(--vscode-textCodeBlock-background);
      --selected-bg: var(--vscode-list-activeSelectionBackground);
      --selected-fg: var(--vscode-list-activeSelectionForeground);
    }
    html, body { height: 100%; }
    body { color: var(--fg); background: var(--bg); margin: 0; display: flex; flex-direction: column; }
    .container { display: flex; flex-direction: column; height: 100%; }
    .header { padding: 10px 16px; border-bottom: 1px solid var(--border); font-weight: 600; }
    .messages { flex: 1; overflow-y: auto; padding: 20px; display: flex; flex-direction: column; gap: 16px; }
    .card { 
      border: 1px solid var(--border); 
      border-radius: 8px; 
      padding: 16px; 
      background: var(--card-bg);
      transition: all 0.2s ease;
      box-shadow: 0 2px 4px rgba(0, 0, 0, 0.1);
      margin: 4px 2px;
    }
    .card:hover {
      border-color: var(--hover-border);
      box-shadow: 0 4px 8px rgba(0, 0, 0, 0.15);
      transform: translateY(-1px);
    }
    .role { 
      font-size: 12px; 
      color: var(--badge-fg); 
      background: var(--badge-bg);
      margin-bottom: 6px; 
      text-transform: uppercase;
      display: inline-block;
      padding: 2px 6px;
      border-radius: 3px;
    }
    .text { 
      white-space: pre-wrap;
      color: var(--fg);
    }
    .code { 
      background: var(--code-bg); 
      border: 1px solid var(--border); 
      border-radius: 6px; 
      padding: 8px; 
      font-family: var(--vscode-editor-font-family, ui-monospace, SFMono-Regular, Menlo, Monaco, Consolas, "Liberation Mono", "Courier New", monospace);
      font-size: var(--vscode-editor-font-size);
      line-height: var(--vscode-editor-line-height);
      overflow-x: auto;
    }
    .toolbar { display: flex; gap: 8px; margin-top: 8px; }
    .pillbar { display: flex; gap: 8px; flex-wrap: wrap; padding: 8px 16px; border-top: 1px solid var(--border); }
    .pill { 
      border: 1px solid var(--border); 
      border-radius: 999px; 
      padding: 4px 10px; 
      font-size: 12px; 
      background: transparent; 
      color: var(--fg);
      cursor: pointer;
      transition: all 0.2s;
    }
    .pill:hover {
      background: var(--badge-bg);
      color: var(--badge-fg);
      border-color: var(--badge-bg);
    }
    .pill.active { 
      background: var(--badge-bg);
      color: var(--badge-fg);
      border-color: var(--badge-bg);
    }
    .composer { border-top: 1px solid var(--border); padding: 10px 16px; display: flex; flex-direction: column; gap: 8px; }
    textarea { width: 100%; min-height: 70px; resize: vertical; background: var(--input-bg); color: var(--input-fg); border: 1px solid var(--border); border-radius: 6px; padding: 8px; }
    .composer-row { display: flex; align-items: center; gap: 8px; }
    .btn { background: var(--btn); color: var(--btn-fg); border: none; padding: 6px 12px; border-radius: 6px; cursor: pointer; }
    .muted { color: var(--muted); font-size: 12px; }
    .meta { font-size: 12px; color: var(--muted); margin-bottom: 8px; }
    .result-header { font-weight: 600; margin-bottom: 6px; }
    .search-result { font-size: 12px; color: var(--muted); }
  </style>
</head>
<body>
  <div class="container">
    <div class="header">ScubaCoder — Chat</div>
    <div id="messages" class="messages">
      <!-- Initial assistant tip -->
      <div class="card">
        <div class="role">Assistant</div>
        <div class="text">Ask a question about your codebase. Use the context pills below to include files. For example: <code>How do I open the chat panel?</code></div>
      </div>
    </div>
    <div id="pillbar" class="pillbar"></div>
    <div class="composer">
      <div class="composer-row">
        <select id="agent">
          {{#availableProviderModels}}
            <option value="{{provider}}|{{model}}" {{#isSelected}}selected{{/isSelected}}>
              {{provider}} • {{model}}
            </option>
          {{/availableProviderModels}}
        </select>
        <span class="muted">No code leaves your machine.</span>
      </div>
      <textarea id="input" placeholder="Ask ScubaCoder… (Shift+Enter = newline)"></textarea>
      <div class="composer-row">
        <button id="send" class="btn">Send</button>
        <button id="addCtx" class="pill">Add Context…</button>
        <span class="muted">Tip: select files to share as context.</span>
      </div>
    </div>
  </div>

<script nonce="{{nonce}}">
  const vscode = acquireVsCodeApi();
  const init = {{initJson}};

  const messagesEl = document.getElementById('messages');
  const inputEl = document.getElementById('input');
  const sendBtn = document.getElementById('send');
  const pillbar = document.getElementById('pillbar');
  const addCtxBtn = document.getElementById('addCtx');

  const selected = new Set();

  function renderPills() {
    pillbar.innerHTML = '';
    for (const c of init.candidates) {
      const el = document.createElement('button');
      el.className = 'pill' + (selected.has(c.uri) ? ' active' : '');
      el.textContent = c.label;
      el.title = c.uri;
      el.onclick = () => { if (selected.has(c.uri)) selected.delete(c.uri); else selected.add(c.uri); renderPills(); };
      pillbar.appendChild(el);
    }
  }
  renderPills();

  addCtxBtn.onclick = () => {
    // Simple UX: toggle all currently visible candidates
    if (selected.size < init.candidates.length) {
      for (const c of init.candidates) selected.add(c.uri);
    } else {
      selected.clear();
    }
    renderPills();
  };

  function appendUser(text) {
    const card = document.createElement('div'); card.className = 'card';
    card.innerHTML = '<div class="role">You</div><div class="text"></div>';
    card.querySelector('.text').textContent = text;
    messagesEl.appendChild(card);
    messagesEl.scrollTop = messagesEl.scrollHeight;
  }

  function appendAssistant(markdownText) {
    const card = document.createElement('div'); card.className = 'card';
    const role = document.createElement('div'); role.className = 'role'; role.textContent = 'Assistant';
    const text = document.createElement('div'); text.className = 'text';
    const toolbar = document.createElement('div'); toolbar.className = 'toolbar';

    // very small markdown-ish handling for code blocks
    const parts = markdownText.split(/```([a-zA-Z0-9_-]+)?\\n([\\s\\S]*?)```/g);
    if (parts.length > 1) {
      for (let i = 0; i < parts.length; ) {
        const plain = parts[i++];
        if (plain) { const p = document.createElement('div'); p.textContent = plain; text.appendChild(p); }
        const lang = parts[i++]; const code = parts[i++];
        if (code !== undefined) {
          const pre = document.createElement('pre'); pre.className = 'code';
          const label = document.createElement('div'); label.className = 'meta'; label.textContent = (lang || '').toUpperCase();
          const codeEl = document.createElement('code'); codeEl.textContent = code;
          const copy = document.createElement('button'); copy.className='pill'; copy.textContent='Copy';
          copy.onclick = () => navigator.clipboard?.writeText(code).catch(()=>{});
          const insert = document.createElement('button'); insert.className='pill'; insert.textContent='Insert at Cursor';
          insert.onclick = () => vscode.postMessage({ type: 'insert', code });
          pre.appendChild(codeEl);
          text.appendChild(label); text.appendChild(pre);
          toolbar.appendChild(copy); toolbar.appendChild(insert);
        }
      }
    } else {
      text.textContent = markdownText;
    }

    const up = document.createElement('button'); up.className='pill'; up.textContent='👍';
    const down = document.createElement('button'); down.className='pill'; down.textContent='👎';
    up.onclick = () => vscode.postMessage({ type: 'feedback', value: 'up' });
    down.onclick = () => vscode.postMessage({ type: 'feedback', value: 'down' });
    toolbar.appendChild(up); toolbar.appendChild(down);

    card.appendChild(role); card.appendChild(text); card.appendChild(toolbar);
    messagesEl.appendChild(card);
    messagesEl.scrollTop = messagesEl.scrollHeight;
  }

  function appendSearchResults(results) {
    const card = document.createElement('div'); card.className = 'card';
    card.innerHTML = '<div class="result-header">Searched workspace</div>';
    for (const r of results) {
      const row = document.createElement('div'); row.className = 'search-result';
      row.textContent = r.file + ':' + r.line + ' — ' + r.preview;
      card.appendChild(row);
    }
    messagesEl.appendChild(card);
    messagesEl.scrollTop = messagesEl.scrollHeight;
  }

  sendBtn.onclick = () => {
    const text = inputEl.value.trim();
    if (!text) return;
    appendUser(text);
    vscode.postMessage({ type: 'chat', text, contextUris: Array.from(selected) });
    inputEl.value = '';
  };
  inputEl.addEventListener('keydown', (e) => {
    if (e.key === 'Enter' && !e.shiftKey) {
      e.preventDefault();
      sendBtn.click();
    }
  });

  window.addEventListener('message', (event) => {
    const msg = event.data;
    if (msg.type === 'reply') appendAssistant(msg.text || '');
    if (msg.type === 'searchResults') appendSearchResults(msg.results || []);
  });
</script>
</body>
</html>